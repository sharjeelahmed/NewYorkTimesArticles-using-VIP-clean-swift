//
//  ArticleListViewController.swift
//  NewYorkTimesArticles
//
//  Created by shairjeel ahmed on 24/07/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ArticleListDisplayLogic: AnyObject
{
    func displayFetchedArticles(viewModel: ListArticles.fetchArticle.ViewModel)
}

class ArticleListViewController: UIViewController, ArticleListDisplayLogic
{
    var interactor: ArticleListBusinessLogic?
    var router: (NSObjectProtocol & ArticleListRoutingLogic & ArticleListDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ArticleListInteractor()
        let presenter = ArticleListPresenter()
        let router = ArticleListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    @IBOutlet weak var articletableView:UITableView!
    
    // MARK: - Fetch Articles
    
    var displayedArticles: [ListArticles.fetchArticle.ViewModel.DisplayedArticle] = []{
        didSet{
            DispatchQueue.main.async {
                self.reloadTableView()
            }
        }
    }
    
    // MARK: View lifecycle
    
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.title = "NewYork Articles"
        self.getArticles()
        self.addBarItem()
    }
    
    // MARK: Do something
    
    
    func getArticles()
    {
        let request = ListArticles.fetchArticle.Request(periodSection: "1")
        interactor?.getArticlesFromApi(request: request)
    }
    
    func displayFetchedArticles(viewModel: ListArticles.fetchArticle.ViewModel)
    {
        self.displayedArticles = viewModel.displayedArticles
    }
    
    func reloadTableView(){
        DispatchQueue.main.async {
            self.articletableView.reloadData()
        }
    }
    
    @objc func editPeriod(){
        let alertController = UIAlertController(title: "Back Days", message: "", preferredStyle: UIAlertController.Style.alert)
        alertController.addTextField { (textField : UITextField!) -> Void in
            textField.placeholder = "Enter back day peroid"
            textField.keyboardType = .numberPad
        }
        let saveAction = UIAlertAction(title: "Save", style: UIAlertAction.Style.default, handler: { alert -> Void in
            let firstTextField = alertController.textFields![0] as UITextField
            
            self.interactor?.getArticlesFromApi(request: ListArticles.fetchArticle.Request.init(periodSection: firstTextField.text ?? "1"))
        })
        let cancelAction = UIAlertAction(title: "Cancel", style: UIAlertAction.Style.default, handler: {
            (action : UIAlertAction!) -> Void in })
        
        alertController.addAction(saveAction)
        alertController.addAction(cancelAction)
        
        self.present(alertController, animated: true, completion: nil)
    }
    
    func setNavigationBar(){
        self.title = "NewYorkArticles"
        self.addBarItem()
    }
    func addBarItem(){
        let edit = UIBarButtonItem(barButtonSystemItem: .edit, target: self, action: #selector(editPeriod))
        navigationItem.rightBarButtonItems = [edit]
    }
    
    
}

extension ArticleListViewController:UITableViewDataSource,UITableViewDelegate{
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        self.displayedArticles.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: "ArticleTableViewCell", for: indexPath) as? ArticleTableViewCell{
            cell.setData(articleViewModel: self.displayedArticles[indexPath.row])
            return cell
        }
        return UITableViewCell()
    }
    
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 150
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if let cell = cell as? ArticleTableViewCell{
            cell.reloadData()
        }
    }
    
    func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath) {
        
    }
}
